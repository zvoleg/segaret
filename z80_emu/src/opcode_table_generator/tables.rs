// static ref EXTENDING_TO_TWO_BYTES: HashSet<u32> = HashSet::from([0xCB, 0xDD, 0xED, 0xFDu32]);
// static ref EXTENDING_TO_FOUR_BYTES: HashSet<u32> = HashSet::from([0xDDCB, 0xFDCBu32]);


// static ref CB_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: RLC.b rg!(B)),   inst!(0x01: RLC.b rg!(C)),   inst!(0x02: RLC.b rg!(D)),   inst!(0x03: RLC.b rg!(E)),   inst!(0x04: RLC.b rg!(H)),   inst!(0x05: RLC.b rg!(L)),   inst!(0x06: RLC.b ind_hl),   inst!(0x07: RLC.b rg!(A)),   inst!(0x08: RRC.b rg!(B)),   inst!(0x09: RRC.b rg!(C)),   inst!(0x0A: RRC.b rg!(D)),   inst!(0x0B: RRC.b rg!(E)),   inst!(0x0C: RRC.b rg!(H)),   inst!(0x0D: RRC.b rg!(L)),   inst!(0x0E: RRC.b ind_hl),   inst!(0x0F: RRC.b rg!(A)),
//     inst!(0x10: RL.b rg!(B)),    inst!(0x11: RL.b rg!(C)),    inst!(0x12: RL.b rg!(D)),    inst!(0x13: RL.b rg!(E)),    inst!(0x14: RL.b rg!(H)),    inst!(0x15: RL.b rg!(L)),    inst!(0x16: RL.b ind_hl),    inst!(0x17: RL.b rg!(A)),    inst!(0x18: RR.b rg!(B)),    inst!(0x19: RR.b rg!(C)),    inst!(0x1A: RR.b rg!(A), rg!(D)),  inst!(0x1B: RR.b rg!(E)),    inst!(0x1C: RR.b rg!(H)),    inst!(0x1D: RR.b rg!(L)),    inst!(0x1E: RR.b ind_hl),    inst!(0x1F: RR.b rg!(A)),
//     inst!(0x20: SLA.b rg!(B)),   inst!(0x21: SLA.b rg!(C)),   inst!(0x22: SLA.b rg!(D)),   inst!(0x23: SLA.b rg!(E)),   inst!(0x24: SLA.b rg!(H)),   inst!(0x25: SLA.b rg!(L)),   inst!(0x26: SLA.b ind_hl),   inst!(0x27: SLA.b rg!(A)),   inst!(0x28: SRA.b rg!(B)),   inst!(0x29: SRA.b rg!(C)),   inst!(0x2A: SRA.b rg!(D)),   inst!(0x2B: SRA.b rg!(E)),   inst!(0x2C: SRA.b rg!(H)),   inst!(0x2D: SRA.b rg!(L)),   inst!(0x2E: SRA.b ind_hl),   inst!(0x2F: SRA.b rg!(A)),
//     inst!(0x30: NOP),     inst!(0x31: NOP),     inst!(0x32: NOP),     inst!(0x33: NOP),     inst!(0x34: NOP),     inst!(0x35: NOP),     inst!(0x36: NOP),          inst!(0x37: NOP),     inst!(0x38: SRL.b rg!(B)),   inst!(0x39: SRL.b rg!(C)),   inst!(0x3A: SRL.b rg!(D)),   inst!(0x3B: SRL.b rg!(E)),   inst!(0x3C: SRL.b rg!(H)),   inst!(0x3D: SRL.b rg!(L)),   inst!(0x3E: SRL.b ind_hl),   inst!(0x3F: SRL.b rg!(A)),
//     inst!(0x40: BIT.b 0 rg!(B)), inst!(0x41: BIT.b 0 rg!(C)), inst!(0x42: BIT.b 0 rg!(D)), inst!(0x43: BIT.b 0 rg!(E)), inst!(0x44: BIT.b 0 rg!(H)), inst!(0x45: BIT.b 0 rg!(L)), inst!(0x46: BIT.b 0 ind_hl), inst!(0x47: BIT.b 0 rg!(A)), inst!(0x48: BIT.b 1 rg!(B)), inst!(0x49: BIT.b 1 rg!(C)), inst!(0x4A: BIT.b 1 rg!(D)), inst!(0x4B: BIT.b 1 rg!(E)), inst!(0x4C: BIT.b 1 rg!(H)), inst!(0x4D: BIT.b 1 rg!(L)), inst!(0x4E: BIT.b 1 ind_hl), inst!(0x4F: BIT.b 1 rg!(A)),
//     inst!(0x50: BIT.b 2 rg!(B)), inst!(0x51: BIT.b 2 rg!(C)), inst!(0x52: BIT.b 2 rg!(D)), inst!(0x53: BIT.b 2 rg!(E)), inst!(0x54: BIT.b 2 rg!(H)), inst!(0x55: BIT.b 2 rg!(L)), inst!(0x56: BIT.b 2 ind_hl), inst!(0x57: BIT.b 2 rg!(A)), inst!(0x58: BIT.b 3 rg!(B)), inst!(0x59: BIT.b 3 rg!(C)), inst!(0x5A: BIT.b 3 rg!(D)), inst!(0x5B: BIT.b 3 rg!(E)), inst!(0x5C: BIT.b 3 rg!(H)), inst!(0x5D: BIT.b 3 rg!(L)), inst!(0x5E: BIT.b 3 ind_hl), inst!(0x5F: BIT.b 3 rg!(A)),
//     inst!(0x60: BIT.b 4 rg!(B)), inst!(0x61: BIT.b 4 rg!(C)), inst!(0x62: BIT.b 4 rg!(D)), inst!(0x63: BIT.b 4 rg!(E)), inst!(0x64: BIT.b 4 rg!(H)), inst!(0x65: BIT.b 4 rg!(L)), inst!(0x66: BIT.b 4 ind_hl), inst!(0x67: BIT.b 4 rg!(A)), inst!(0x68: BIT.b 5 rg!(B)), inst!(0x69: BIT.b 5 rg!(C)), inst!(0x6A: BIT.b 5 rg!(D)), inst!(0x6B: BIT.b 5 rg!(E)), inst!(0x6C: BIT.b 5 rg!(H)), inst!(0x6D: BIT.b 5 rg!(L)), inst!(0x6E: BIT.b 5 ind_hl), inst!(0x6F: BIT.b 5 rg!(A)),
//     inst!(0x70: BIT.b 6 rg!(B)), inst!(0x71: BIT.b 6 rg!(C)), inst!(0x72: BIT.b 6 rg!(D)), inst!(0x73: BIT.b 6 rg!(E)), inst!(0x74: BIT.b 6 rg!(H)), inst!(0x75: BIT.b 6 rg!(L)), inst!(0x76: BIT.b 6 ind_hl), inst!(0x77: BIT.b 6 rg!(A)), inst!(0x78: BIT.b 7 rg!(B)), inst!(0x79: BIT.b 7 rg!(C)), inst!(0x7A: BIT.b 7 rg!(D)), inst!(0x7B: BIT.b 7 rg!(E)), inst!(0x7C: BIT.b 7 rg!(H)), inst!(0x7D: BIT.b 7 rg!(L)), inst!(0x7E: BIT.b 7 ind_hl), inst!(0x7F: BIT.b 7 rg!(A)),
//     inst!(0x80: RES.b 0 rg!(B)), inst!(0x81: RES.b 0 rg!(C)), inst!(0x82: RES.b 0 rg!(D)), inst!(0x83: RES.b 0 rg!(E)), inst!(0x84: RES.b 0 rg!(H)), inst!(0x85: RES.b 0 rg!(L)), inst!(0x86: RES.b 0 ind_hl), inst!(0x87: RES.b 0 rg!(A)), inst!(0x88: RES.b 1 rg!(B)), inst!(0x89: RES.b 1 rg!(C)), inst!(0x8A: RES.b 1 rg!(D)), inst!(0x8B: RES.b 1 rg!(E)), inst!(0x8C: RES.b 1 rg!(H)), inst!(0x8D: RES.b 1 rg!(L)), inst!(0x8E: RES.b 1 ind_hl), inst!(0x8F: RES.b 1 rg!(A)),
//     inst!(0x90: RES.b 2 rg!(B)), inst!(0x91: RES.b 2 rg!(C)), inst!(0x92: RES.b 2 rg!(D)), inst!(0x93: RES.b 2 rg!(E)), inst!(0x94: RES.b 2 rg!(H)), inst!(0x95: RES.b 2 rg!(L)), inst!(0x96: RES.b 2 ind_hl), inst!(0x97: RES.b 2 rg!(A)), inst!(0x98: RES.b 3 rg!(B)), inst!(0x99: RES.b 3 rg!(C)), inst!(0x9A: RES.b 3 rg!(D)), inst!(0x9B: RES.b 3 rg!(E)), inst!(0x9C: RES.b 3 rg!(H)), inst!(0x9D: RES.b 3 rg!(L)), inst!(0x9E: RES.b 3 ind_hl), inst!(0x9F: RES.b 3 rg!(A)),
//     inst!(0xA0: RES.b 4 rg!(B)), inst!(0xA1: RES.b 4 rg!(C)), inst!(0xA2: RES.b 4 rg!(D)), inst!(0xA3: RES.b 4 rg!(E)), inst!(0xA4: RES.b 4 rg!(H)), inst!(0xA5: RES.b 4 rg!(L)), inst!(0xA6: RES.b 4 ind_hl), inst!(0xA7: RES.b 4 rg!(A)), inst!(0xA8: RES.b 5 rg!(B)), inst!(0xA9: RES.b 5 rg!(C)), inst!(0xAA: RES.b 5 rg!(D)), inst!(0xAB: RES.b 5 rg!(E)), inst!(0xAC: RES.b 5 rg!(H)), inst!(0xAD: RES.b 5 rg!(L)), inst!(0xAE: RES.b 5 ind_hl), inst!(0xAF: RES.b 5 rg!(A)),
//     inst!(0xB0: RES.b 6 rg!(B)), inst!(0xB1: RES.b 6 rg!(C)), inst!(0xB2: RES.b 6 rg!(D)), inst!(0xB3: RES.b 6 rg!(E)), inst!(0xB4: RES.b 6 rg!(H)), inst!(0xB5: RES.b 6 rg!(L)), inst!(0xB6: RES.b 6 ind_hl), inst!(0xB7: RES.b 6 rg!(A)), inst!(0xB8: RES.b 7 rg!(B)), inst!(0xB9: RES.b 7 rg!(C)), inst!(0xBA: RES.b 7 rg!(D)), inst!(0xBB: RES.b 7 rg!(E)), inst!(0xBC: RES.b 7 rg!(H)), inst!(0xBD: RES.b 7 rg!(L)), inst!(0xBE: RES.b 7 ind_hl), inst!(0xBF: RES.b 7 rg!(A)),
//     inst!(0xC0: SET.b 0 rg!(B)), inst!(0xC1: SET.b 0 rg!(C)), inst!(0xC2: SET.b 0 rg!(D)), inst!(0xC3: SET.b 0 rg!(E)), inst!(0xC4: SET.b 0 rg!(H)), inst!(0xC5: SET.b 0 rg!(L)), inst!(0xC6: SET.b 0 ind_hl), inst!(0xC7: SET.b 0 rg!(A)), inst!(0xC8: SET.b 1 rg!(B)), inst!(0xC9: SET.b 1 rg!(C)), inst!(0xCA: SET.b 1 rg!(D)), inst!(0xCB: SET.b 1 rg!(E)), inst!(0xCC: SET.b 1 rg!(H)), inst!(0xCD: SET.b 1 rg!(L)), inst!(0xCE: SET.b 1 ind_hl), inst!(0xCF: SET.b 1 rg!(A)),
//     inst!(0xD0: SET.b 2 rg!(B)), inst!(0xD1: SET.b 2 rg!(C)), inst!(0xD2: SET.b 2 rg!(D)), inst!(0xD3: SET.b 2 rg!(E)), inst!(0xD4: SET.b 2 rg!(H)), inst!(0xD5: SET.b 2 rg!(L)), inst!(0xD6: SET.b 2 ind_hl), inst!(0xD7: SET.b 2 rg!(A)), inst!(0xD8: SET.b 3 rg!(B)), inst!(0xD9: SET.b 3 rg!(C)), inst!(0xDA: SET.b 3 rg!(D)), inst!(0xDB: SET.b 3 rg!(E)), inst!(0xDC: SET.b 3 rg!(H)), inst!(0xDD: SET.b 3 rg!(L)), inst!(0xDE: SET.b 3 ind_hl), inst!(0xDF: SET.b 3 rg!(A)),
//     inst!(0xE0: SET.b 4 rg!(B)), inst!(0xE1: SET.b 4 rg!(C)), inst!(0xE2: SET.b 4 rg!(D)), inst!(0xE3: SET.b 4 rg!(E)), inst!(0xE4: SET.b 4 rg!(H)), inst!(0xE5: SET.b 4 rg!(L)), inst!(0xE6: SET.b 4 ind_hl), inst!(0xE7: SET.b 4 rg!(A)), inst!(0xE8: SET.b 5 rg!(B)), inst!(0xE9: SET.b 5 rg!(C)), inst!(0xEA: SET.b 5 rg!(D)), inst!(0xEB: SET.b 5 rg!(E)), inst!(0xEC: SET.b 5 rg!(H)), inst!(0xED: SET.b 5 rg!(L)), inst!(0xEE: SET.b 5 ind_hl), inst!(0xEF: SET.b 5 rg!(A)),
//     inst!(0xF0: SET.b 6 rg!(B)), inst!(0xF1: SET.b 6 rg!(C)), inst!(0xF2: SET.b 6 rg!(D)), inst!(0xF3: SET.b 6 rg!(E)), inst!(0xF4: SET.b 6 rg!(H)), inst!(0xF5: SET.b 6 rg!(L)), inst!(0xF6: SET.b 6 ind_hl), inst!(0xF7: SET.b 6 rg!(A)), inst!(0xF8: SET.b 7 rg!(B)), inst!(0xF9: SET.b 7 rg!(C)), inst!(0xFA: SET.b 7 rg!(D)), inst!(0xFB: SET.b 7 rg!(E)), inst!(0xFC: SET.b 7 rg!(H)), inst!(0xFD: SET.b 7 rg!(L)), inst!(0xFE: SET.b 7 ind_hl), inst!(0xFF: SET.b 7 rg!(A)),
// ];

// static ref DD_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: XEP.b),         inst!(0x01: XEP.b),         inst!(0x02: XEP.b),         inst!(0x03: XEP.b),          inst!(0x04: XEP.b),         inst!(0x05: XEP.b),         inst!(0x06: XEP.b),          inst!(0x07: XEP.b),         inst!(0x08: XEP.b), inst!(0x09: ADD.w ix bc), inst!(0x0A: XEP.b),      inst!(0x0B: XEP.b),    inst!(0x0C: XEP.b), inst!(0x0D: XEP.b), inst!(0x0E: XEP.b),          inst!(0x0F: XEP.b),
//     inst!(0x10: XEP.b),         inst!(0x11: XEP.b),         inst!(0x12: XEP.b),         inst!(0x13: XEP.b),          inst!(0x14: XEP.b),         inst!(0x15: XEP.b),         inst!(0x16: XEP.b),          inst!(0x17: XEP.b),         inst!(0x18: XEP.b), inst!(0x19: ADD.w ix de), inst!(0x1A: XEP.b),      inst!(0x1B: XEP.b),    inst!(0x1C: XEP.b), inst!(0x1D: XEP.b), inst!(0x1E: XEP.b),          inst!(0x1F: XEP.b),
//     inst!(0x20: XEP.b),         inst!(0x21: LD.w ix DD),    inst!(0x22: LD.w DD ix),    inst!(0x23: INC.w ix),       inst!(0x24: XEP.b),         inst!(0x25: XEP.b),         inst!(0x26: XEP.b),          inst!(0x27: XEP.b),         inst!(0x28: XEP.b), inst!(0x29: ADD.w ix ix), inst!(0x2A: LD.w ix DD), inst!(0x2B: DEC.w ix), inst!(0x2C: XEP.b), inst!(0x2D: XEP.b), inst!(0x2E: XEP.b),          inst!(0x2F: XEP.b),
//     inst!(0x30: XEP.b),         inst!(0x31: XEP.b),         inst!(0x32: XEP.b),         inst!(0x33: XEP.b),          inst!(0x34: INC.b idx_ix),  inst!(0x35: DEC.b idx_ix),  inst!(0x36: LD.b idx_ix n),  inst!(0x37: XEP.b),         inst!(0x38: XEP.b), inst!(0x39: ADD.w ix sp), inst!(0x3A: XEP.b),      inst!(0x3B: XEP.b),    inst!(0x3C: XEP.b), inst!(0x3D: XEP.b), inst!(0x3E: XEP.b),          inst!(0x3F: XEP.b),
//     inst!(0x40: XEP.b),         inst!(0x41: XEP.b),         inst!(0x42: XEP.b),         inst!(0x43: XEP.b),          inst!(0x44: XEP.b),         inst!(0x45: XEP.b),         inst!(0x46: LD.b b idx_ix),  inst!(0x47: XEP.b),         inst!(0x48: XEP.b), inst!(0x49: XEP.b),       inst!(0x4A: XEP.b),      inst!(0x4B: XEP.b),    inst!(0x4C: XEP.b), inst!(0x4D: XEP.b), inst!(0x4E: LD.b c idx_ix),  inst!(0x4F: XEP.b),
//     inst!(0x50: XEP.b),         inst!(0x51: XEP.b),         inst!(0x52: XEP.b),         inst!(0x53: XEP.b),          inst!(0x54: XEP.b),         inst!(0x55: XEP.b),         inst!(0x56: LD.b rg!(D), idx_ix),  inst!(0x57: XEP.b),         inst!(0x58: XEP.b), inst!(0x59: XEP.b),       inst!(0x5A: XEP.b),      inst!(0x5B: XEP.b),    inst!(0x5C: XEP.b), inst!(0x5D: XEP.b), inst!(0x5E: LD.b, rg!(E), idx_ix),  inst!(0x5F: XEP.b),
//     inst!(0x60: XEP.b),         inst!(0x61: XEP.b),         inst!(0x62: XEP.b),         inst!(0x63: XEP.b),          inst!(0x64: XEP.b),         inst!(0x65: XEP.b),         inst!(0x66: LD.b rg!(H), idx_ix),  inst!(0x67: XEP.b),         inst!(0x68: XEP.b), inst!(0x69: XEP.b),       inst!(0x6A: XEP.b),      inst!(0x6B: XEP.b),    inst!(0x6C: XEP.b), inst!(0x6D: XEP.b), inst!(0x6E: LD.b, rg!(L), idx_ix),  inst!(0x6F: XEP.b),
//     inst!(0x70: LD.b idx_ix rg!(B)), inst!(0x71: LD.b idx_ix rg!(C)), inst!(0x72: LD.b idx_ix rg!(D)), inst!(0x73: LD.b idx_ix rg!(E)),  inst!(0x74: LD.b idx_ix rg!(H)), inst!(0x75: LD.b idx_ix rg!(L)), inst!(0x76: XEP.b),          inst!(0x77: LD.b idx_ix rg!(A)), inst!(0x78: XEP.b), inst!(0x79: XEP.b),       inst!(0x7A: XEP.b),      inst!(0x7B: XEP.b),    inst!(0x7C: XEP.b), inst!(0x7D: XEP.b), inst!(0x7E: LD.b rg!(A), idx_ix),  inst!(0x7F: XEP.b),
//     inst!(0x80: XEP.b),         inst!(0x81: XEP.b),         inst!(0x82: XEP.b),         inst!(0x83: XEP.b),          inst!(0x84: XEP.b),         inst!(0x85: XEP.b),         inst!(0x86: ADD.b rg!(A), idx_ix), inst!(0x87: XEP.b),         inst!(0x88: XEP.b), inst!(0x89: XEP.b),       inst!(0x8A: XEP.b),      inst!(0x8B: XEP.b),    inst!(0x8C: XEP.b), inst!(0x8D: XEP.b), inst!(0x8E: ADC.b rg!(A), idx_ix), inst!(0x8F: XEP.b),
//     inst!(0x90: XEP.b),         inst!(0x91: XEP.b),         inst!(0x92: XEP.b),         inst!(0x93: XEP.b),          inst!(0x94: XEP.b),         inst!(0x95: XEP.b),         inst!(0x96: SUB.b rg!(A), idx_ix), inst!(0x97: XEP.b),         inst!(0x98: XEP.b), inst!(0x99: XEP.b),       inst!(0x9A: XEP.b),      inst!(0x9B: XEP.b),    inst!(0x9C: XEP.b), inst!(0x9D: XEP.b), inst!(0x9E: SBC.b rg!(A), idx_ix), inst!(0x9F: XEP.b),
//     inst!(0xA0: XEP.b),         inst!(0xA1: XEP.b),         inst!(0xA2: XEP.b),         inst!(0xA3: XEP.b),          inst!(0xA4: XEP.b),         inst!(0xA5: XEP.b),         inst!(0xA6: AND.b rg!(A), idx_ix), inst!(0xA7: XEP.b),         inst!(0xA8: XEP.b), inst!(0xA9: XEP.b),       inst!(0xAA: XEP.b),      inst!(0xAB: XEP.b),    inst!(0xAC: XEP.b), inst!(0xAD: XEP.b), inst!(0xAE: XOR.b rg!(A), idx_ix), inst!(0xAF: XEP.b),
//     inst!(0xB0: XEP.b),         inst!(0xB1: XEP.b),         inst!(0xB2: XEP.b),         inst!(0xB3: XEP.b),          inst!(0xB4: XEP.b),         inst!(0xB5: XEP.b),         inst!(0xB6: OR.b rg!(A), idx_ix),  inst!(0xB7: XEP.b),         inst!(0xB8: XEP.b), inst!(0xB9: XEP.b),       inst!(0xBA: XEP.b),      inst!(0xBB: XEP.b),    inst!(0xBC: XEP.b), inst!(0xBD: XEP.b), inst!(0xBE: CP.b rg!(A), idx_ix),  inst!(0xBF: XEP.b),
//     inst!(0xC0: XEP.b),         inst!(0xC1: XEP.b),         inst!(0xC2: XEP.b),         inst!(0xC3: XEP.b),          inst!(0xC4: XEP.b),         inst!(0xC5: XEP.b),         inst!(0xC6: XEP.b),          inst!(0xC7: XEP.b),         inst!(0xC8: XEP.b), inst!(0xC9: XEP.b),       inst!(0xCA: XEP.b),      inst!(0xCB: XEP.b),    inst!(0xCC: XEP.b), inst!(0xCD: XEP.b), inst!(0xCE: XEP.b),          inst!(0xCF: XEP.b),
//     inst!(0xD0: XEP.b),         inst!(0xD1: XEP.b),         inst!(0xD2: XEP.b),         inst!(0xD3: XEP.b),          inst!(0xD4: XEP.b),         inst!(0xD5: XEP.b),         inst!(0xD6: XEP.b),          inst!(0xD7: XEP.b),         inst!(0xD8: XEP.b), inst!(0xD9: XEP.b),       inst!(0xDA: XEP.b),      inst!(0xDB: XEP.b),    inst!(0xDC: XEP.b), inst!(0xDD: XEP.b), inst!(0xDE: XEP.b),          inst!(0xDF: XEP.b),
//     inst!(0xE0: XEP.b),         inst!(0xE1: POP.w ix),      inst!(0xE2: XEP.b),         inst!(0xE3: EX.w ind_sp ix), inst!(0xE4: XEP.b),         inst!(0xE5: PUSH.w ix),     inst!(0xE6: XEP.b),          inst!(0xE7: XEP.b),         inst!(0xE8: XEP.b), inst!(0xE9: JP_ind.b ix), inst!(0xEA: XEP.b),      inst!(0xEB: XEP.b),    inst!(0xEC: XEP.b), inst!(0xED: XEP.b), inst!(0xEE: XEP.b),          inst!(0xEF: XEP.b),
//     inst!(0xF0: XEP.b),         inst!(0xF1: XEP.b),         inst!(0xF2: XEP.b),         inst!(0xF3: XEP.b),          inst!(0xF4: XEP.b),         inst!(0xF5: XEP.b),         inst!(0xF6: XEP.b),          inst!(0xF7: XEP.b),         inst!(0xF8: XEP.b), inst!(0xF9: LD.w sp ix),  inst!(0xFA: XEP.b),      inst!(0xFB: XEP.b),    inst!(0xFC: XEP.b), inst!(0xFD: XEP.b), inst!(0xFE: XEP.b),          inst!(0xFF: XEP.b),
// ];

// static ref ED_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: XEP.b),        inst!(0x01: XEP.b),         inst!(0x02: XEP.b),       inst!(0x03: XEP.b),      inst!(0x04: XEP.b),   inst!(0x05: XEP.b),  inst!(0x06: XEP.b),         inst!(0x07: XEP.b),        inst!(0x08: XEP.b),        inst!(0x09: XEP.b),         inst!(0x0A: XEP.b),       inst!(0x0B: XEP.b),      inst!(0x0C: XEP.b), inst!(0x0D: XEP.b),  inst!(0x0E: XEP.b),          inst!(0x0F: XEP.b),
//     inst!(0x10: XEP.b),        inst!(0x11: XEP.b),         inst!(0x12: XEP.b),       inst!(0x13: XEP.b),      inst!(0x14: XEP.b),   inst!(0x15: XEP.b),  inst!(0x16: XEP.b),         inst!(0x17: XEP.b),        inst!(0x18: XEP.b),        inst!(0x19: XEP.b),         inst!(0x1A: XEP.b),       inst!(0x1B: XEP.b),      inst!(0x1C: XEP.b), inst!(0x1D: XEP.b),  inst!(0x1E: XEP.b),          inst!(0x1F: XEP.b),
//     inst!(0x20: XEP.b),        inst!(0x21: XEP.b),         inst!(0x22: XEP.b),       inst!(0x23: XEP.b),      inst!(0x24: XEP.b),   inst!(0x25: XEP.b),  inst!(0x26: XEP.b),         inst!(0x27: XEP.b),        inst!(0x28: XEP.b),        inst!(0x29: XEP.b),         inst!(0x2A: XEP.b),       inst!(0x2B: XEP.b),      inst!(0x2C: XEP.b), inst!(0x2D: XEP.b),  inst!(0x2E: XEP.b),          inst!(0x2F: XEP.b),
//     inst!(0x30: XEP.b),        inst!(0x31: XEP.b),         inst!(0x32: XEP.b),       inst!(0x33: XEP.b),      inst!(0x34: XEP.b),   inst!(0x35: XEP.b),  inst!(0x36: XEP.b),         inst!(0x37: XEP.b),        inst!(0x38: XEP.b),        inst!(0x39: XEP.b),         inst!(0x3A: XEP.b),       inst!(0x3B: XEP.b),      inst!(0x3C: XEP.b), inst!(0x3D: XEP.b),  inst!(0x3E: XEP.b),          inst!(0x3F: XEP.b),
//     inst!(0x40: IN.b b ind_c), inst!(0x41: OUT.b ind_c rg!(B)), inst!(0x42: SBC.w hl bc), inst!(0x43: LD.w DD bc), inst!(0x44: NEG.b rg!(A)), inst!(0x45: RETN.b), inst!(0x46: IM.b 0),        inst!(0x47: LD.b i rg!(A)),     inst!(0x48: IN.b c ind_c), inst!(0x49: OUT.b ind_c rg!(C)), inst!(0x4A: ADC.w hl bc), inst!(0x4B: LD.w bc DD), inst!(0x4C: XEP.b), inst!(0x4D: RETI.b), inst!(0x4E: LD.b c idx_ix),  inst!(0x4F: LD.b r rg!(A)),
//     inst!(0x50: IN.b rg!(D), ind_c), inst!(0x51: OUT.b ind_c rg!(D)), inst!(0x52: SBC.w hl de), inst!(0x53: LD.w DD de), inst!(0x54: XEP.b),   inst!(0x55: XEP.b),  inst!(0x56: IM.b 1),        inst!(0x57: LD.b rg!(A), i),     inst!(0x58: IN.b, rg!(E), ind_c), inst!(0x59: OUT.b ind_c rg!(E)), inst!(0x5A: ADC.w hl de), inst!(0x5B: LD.w de DD), inst!(0x5C: XEP.b), inst!(0x5D: XEP.b),  inst!(0x5E: IM.b 2),         inst!(0x5F: LD.b rg!(A), r),
//     inst!(0x60: IN.b rg!(H), ind_c), inst!(0x61: OUT.b ind_c rg!(H)), inst!(0x62: SBC.w hl hl), inst!(0x63: XEP.b),      inst!(0x64: XEP.b),   inst!(0x65: XEP.b),  inst!(0x66: LD.b rg!(H), idx_ix), inst!(0x67: RRD.b ind_hl), inst!(0x68: IN.b, rg!(L), ind_c), inst!(0x69: OUT.b ind_c rg!(L)), inst!(0x6A: ADC.w hl hl), inst!(0x6B: XEP.b),      inst!(0x6C: XEP.b), inst!(0x6D: XEP.b),  inst!(0x6E: LD.b, rg!(L), idx_ix),  inst!(0x6F: RLD.b ind_hl),
//     inst!(0x70: XEP.b),        inst!(0x71: XEP.b),         inst!(0x72: SBC.w hl sp), inst!(0x73: LD.w DD sp), inst!(0x74: XEP.b),   inst!(0x75: XEP.b),  inst!(0x76: XEP.b),         inst!(0x77: XEP.b),        inst!(0x78: IN.b rg!(A), ind_c), inst!(0x79: OUT.b ind_c rg!(A)), inst!(0x7A: ADC.w hl sp), inst!(0x7B: LD.w sp DD), inst!(0x7C: XEP.b), inst!(0x7D: XEP.b),  inst!(0x7E: XEP.b),          inst!(0x7F: XEP.b),
//     inst!(0x80: XEP.b),        inst!(0x81: XEP.b),         inst!(0x82: XEP.b),       inst!(0x83: XEP.b),      inst!(0x84: XEP.b),   inst!(0x85: XEP.b),  inst!(0x86: XEP.b),         inst!(0x87: XEP.b),        inst!(0x88: XEP.b),        inst!(0x89: XEP.b),         inst!(0x8A: XEP.b),       inst!(0x8B: XEP.b),      inst!(0x8C: XEP.b), inst!(0x8D: XEP.b),  inst!(0x8E: XEP.b),          inst!(0x8F: XEP.b),
//     inst!(0x90: XEP.b),        inst!(0x91: XEP.b),         inst!(0x92: XEP.b),       inst!(0x93: XEP.b),      inst!(0x94: XEP.b),   inst!(0x95: XEP.b),  inst!(0x96: XEP.b),         inst!(0x97: XEP.b),        inst!(0x98: XEP.b),        inst!(0x99: XEP.b),         inst!(0x9A: XEP.b),       inst!(0x9B: XEP.b),      inst!(0x9C: XEP.b), inst!(0x9D: XEP.b),  inst!(0x9E: XEP.b),          inst!(0x9F: XEP.b),
//     inst!(0xA0: LDI.b),        inst!(0xA1: CPI.b),         inst!(0xA2: INI.b),       inst!(0xA3: OUTI.b),     inst!(0xA4: XEP.b),   inst!(0xA5: XEP.b),  inst!(0xA6: XEP.b),         inst!(0xA7: XEP.b),        inst!(0xA8: LDD.b),        inst!(0xA9: CPD.b),         inst!(0xAA: IND.b),       inst!(0xAB: OUTD.b),     inst!(0xAC: XEP.b), inst!(0xAD: XEP.b),  inst!(0xAE: XOR.b rg!(A), idx_ix), inst!(0xAF: XEP.b),
//     inst!(0xB0: LDIR.b),       inst!(0xB1: CPIR.b),        inst!(0xB2: INIR.b),      inst!(0xB3: OTIR.b),     inst!(0xB4: XEP.b),   inst!(0xB5: XEP.b),  inst!(0xB6: XEP.b),         inst!(0xB7: XEP.b),        inst!(0xB8: LDDR.b),       inst!(0xB9: CPDR.b),        inst!(0xBA: INDR.b),      inst!(0xBB: OTDR.b),     inst!(0xBC: XEP.b), inst!(0xBD: XEP.b),  inst!(0xBE: XEP.b),          inst!(0xBF: XEP.b),
//     inst!(0xC0: XEP.b),        inst!(0xC1: XEP.b),         inst!(0xC2: XEP.b),       inst!(0xC3: XEP.b),      inst!(0xC4: XEP.b),   inst!(0xC5: XEP.b),  inst!(0xC6: XEP.b),         inst!(0xC7: XEP.b),        inst!(0xC8: XEP.b),        inst!(0xC9: XEP.b),         inst!(0xCA: XEP.b),       inst!(0xCB: XEP.b),      inst!(0xCC: XEP.b), inst!(0xCD: XEP.b),  inst!(0xCE: XEP.b),          inst!(0xCF: XEP.b),
//     inst!(0xD0: XEP.b),        inst!(0xD1: XEP.b),         inst!(0xD2: XEP.b),       inst!(0xD3: XEP.b),      inst!(0xD4: XEP.b),   inst!(0xD5: XEP.b),  inst!(0xD6: XEP.b),         inst!(0xD7: XEP.b),        inst!(0xD8: XEP.b),        inst!(0xD9: XEP.b),         inst!(0xDA: XEP.b),       inst!(0xDB: XEP.b),      inst!(0xDC: XEP.b), inst!(0xDD: XEP.b),  inst!(0xDE: XEP.b),          inst!(0xDF: XEP.b),
//     inst!(0xE0: XEP.b),        inst!(0xE1: XEP.b),         inst!(0xE2: XEP.b),       inst!(0xE3: XEP.b),      inst!(0xE4: XEP.b),   inst!(0xE5: XEP.b),  inst!(0xE6: XEP.b),         inst!(0xE7: XEP.b),        inst!(0xE8: XEP.b),        inst!(0xE9: XEP.b),         inst!(0xEA: XEP.b),       inst!(0xEB: XEP.b),      inst!(0xEC: XEP.b), inst!(0xED: XEP.b),  inst!(0xEE: XEP.b),          inst!(0xEF: XEP.b),
//     inst!(0xF0: XEP.b),        inst!(0xF1: XEP.b),         inst!(0xF2: XEP.b),       inst!(0xF3: XEP.b),      inst!(0xF4: XEP.b),   inst!(0xF5: XEP.b),  inst!(0xF6: XEP.b),         inst!(0xF7: XEP.b),        inst!(0xF8: XEP.b),        inst!(0xF9: XEP.b),         inst!(0xFA: XEP.b),       inst!(0xFB: XEP.b),      inst!(0xFC: XEP.b), inst!(0xFD: XEP.b),  inst!(0xFE: XEP.b),          inst!(0xFF: XEP.b),
// ];

// static ref FD_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: XEP.b),         inst!(0x01: XEP.b),         inst!(0x02: XEP.b),         inst!(0x03: XEP.b),          inst!(0x04: XEP.b),         inst!(0x05: XEP.b),         inst!(0x06: XEP.b),          inst!(0x07: XEP.b),         inst!(0x08: XEP.b), inst!(0x09: ADD.w iy bc), inst!(0x0A: XEP.b),      inst!(0x0B: XEP.b),    inst!(0x0C: XEP.b), inst!(0x0D: XEP.b), inst!(0x0E: XEP.b),          inst!(0x0F: XEP.b),
//     inst!(0x10: XEP.b),         inst!(0x11: XEP.b),         inst!(0x12: XEP.b),         inst!(0x13: XEP.b),          inst!(0x14: XEP.b),         inst!(0x15: XEP.b),         inst!(0x16: XEP.b),          inst!(0x17: XEP.b),         inst!(0x18: XEP.b), inst!(0x19: ADD.w iy de), inst!(0x1A: XEP.b),      inst!(0x1B: XEP.b),    inst!(0x1C: XEP.b), inst!(0x1D: XEP.b), inst!(0x1E: XEP.b),          inst!(0x1F: XEP.b),
//     inst!(0x20: XEP.b),         inst!(0x21: LD.w iy DD),    inst!(0x22: LD.w DD iy),    inst!(0x23: INC.w iy),       inst!(0x24: XEP.b),         inst!(0x25: XEP.b),         inst!(0x26: XEP.b),          inst!(0x27: XEP.b),         inst!(0x28: XEP.b), inst!(0x29: ADD.w iy iy), inst!(0x2A: LD.w iy DD), inst!(0x2B: DEC.w iy), inst!(0x2C: XEP.b), inst!(0x2D: XEP.b), inst!(0x2E: XEP.b),          inst!(0x2F: XEP.b),
//     inst!(0x30: XEP.b),         inst!(0x31: XEP.b),         inst!(0x32: XEP.b),         inst!(0x33: XEP.b),          inst!(0x34: INC.b idx_iy),  inst!(0x35: DEC.b idx_iy),  inst!(0x36: LD.b idx_iy n),  inst!(0x37: XEP.b),         inst!(0x38: XEP.b), inst!(0x39: ADD.w iy sp), inst!(0x3A: XEP.b),      inst!(0x3B: XEP.b),    inst!(0x3C: XEP.b), inst!(0x3D: XEP.b), inst!(0x3E: XEP.b),          inst!(0x3F: XEP.b),
//     inst!(0x40: XEP.b),         inst!(0x41: XEP.b),         inst!(0x42: XEP.b),         inst!(0x43: XEP.b),          inst!(0x44: XEP.b),         inst!(0x45: XEP.b),         inst!(0x46: LD.b b idx_iy),  inst!(0x47: XEP.b),         inst!(0x48: XEP.b), inst!(0x49: XEP.b),       inst!(0x4A: XEP.b),      inst!(0x4B: XEP.b),    inst!(0x4C: XEP.b), inst!(0x4D: XEP.b), inst!(0x4E: LD.b c idx_iy),  inst!(0x4F: XEP.b),
//     inst!(0x50: XEP.b),         inst!(0x51: XEP.b),         inst!(0x52: XEP.b),         inst!(0x53: XEP.b),          inst!(0x54: XEP.b),         inst!(0x55: XEP.b),         inst!(0x56: LD.b rg!(D), idx_iy),  inst!(0x57: XEP.b),         inst!(0x58: XEP.b), inst!(0x59: XEP.b),       inst!(0x5A: XEP.b),      inst!(0x5B: XEP.b),    inst!(0x5C: XEP.b), inst!(0x5D: XEP.b), inst!(0x5E: LD.b, rg!(E), idx_iy),  inst!(0x5F: XEP.b),
//     inst!(0x60: XEP.b),         inst!(0x61: XEP.b),         inst!(0x62: XEP.b),         inst!(0x63: XEP.b),          inst!(0x64: XEP.b),         inst!(0x65: XEP.b),         inst!(0x66: LD.b rg!(H), idx_iy),  inst!(0x67: XEP.b),         inst!(0x68: XEP.b), inst!(0x69: XEP.b),       inst!(0x6A: XEP.b),      inst!(0x6B: XEP.b),    inst!(0x6C: XEP.b), inst!(0x6D: XEP.b), inst!(0x6E: LD.b, rg!(L), idx_iy),  inst!(0x6F: XEP.b),
//     inst!(0x70: LD.b idx_iy rg!(B)), inst!(0x71: LD.b idx_iy rg!(C)), inst!(0x72: LD.b idx_iy rg!(D)), inst!(0x73: LD.b idx_iy rg!(E)),  inst!(0x74: LD.b idx_iy rg!(H)), inst!(0x75: LD.b idx_iy rg!(L)), inst!(0x76: XEP.b),          inst!(0x77: LD.b idx_iy rg!(A)), inst!(0x78: XEP.b), inst!(0x79: XEP.b),       inst!(0x7A: XEP.b),      inst!(0x7B: XEP.b),    inst!(0x7C: XEP.b), inst!(0x7D: XEP.b), inst!(0x7E: LD.b rg!(A), idx_iy),  inst!(0x7F: XEP.b),
//     inst!(0x80: XEP.b),         inst!(0x81: XEP.b),         inst!(0x82: XEP.b),         inst!(0x83: XEP.b),          inst!(0x84: XEP.b),         inst!(0x85: XEP.b),         inst!(0x86: ADD.b rg!(A), idx_iy), inst!(0x87: XEP.b),         inst!(0x88: XEP.b), inst!(0x89: XEP.b),       inst!(0x8A: XEP.b),      inst!(0x8B: XEP.b),    inst!(0x8C: XEP.b), inst!(0x8D: XEP.b), inst!(0x8E: ADC.b rg!(A), idx_iy), inst!(0x8F: XEP.b),
//     inst!(0x90: XEP.b),         inst!(0x91: XEP.b),         inst!(0x92: XEP.b),         inst!(0x93: XEP.b),          inst!(0x94: XEP.b),         inst!(0x95: XEP.b),         inst!(0x96: SUB.b rg!(A), idx_iy), inst!(0x97: XEP.b),         inst!(0x98: XEP.b), inst!(0x99: XEP.b),       inst!(0x9A: XEP.b),      inst!(0x9B: XEP.b),    inst!(0x9C: XEP.b), inst!(0x9D: XEP.b), inst!(0x9E: SBC.b rg!(A), idx_iy), inst!(0x9F: XEP.b),
//     inst!(0xA0: XEP.b),         inst!(0xA1: XEP.b),         inst!(0xA2: XEP.b),         inst!(0xA3: XEP.b),          inst!(0xA4: XEP.b),         inst!(0xA5: XEP.b),         inst!(0xA6: AND.b rg!(A), idx_iy), inst!(0xA7: XEP.b),         inst!(0xA8: XEP.b), inst!(0xA9: XEP.b),       inst!(0xAA: XEP.b),      inst!(0xAB: XEP.b),    inst!(0xAC: XEP.b), inst!(0xAD: XEP.b), inst!(0xAE: XOR.b rg!(A), idx_iy), inst!(0xAF: XEP.b),
//     inst!(0xB0: XEP.b),         inst!(0xB1: XEP.b),         inst!(0xB2: XEP.b),         inst!(0xB3: XEP.b),          inst!(0xB4: XEP.b),         inst!(0xB5: XEP.b),         inst!(0xB6: OR.b rg!(A), idx_iy),  inst!(0xB7: XEP.b),         inst!(0xB8: XEP.b), inst!(0xB9: XEP.b),       inst!(0xBA: XEP.b),      inst!(0xBB: XEP.b),    inst!(0xBC: XEP.b), inst!(0xBD: XEP.b), inst!(0xBE: CP.b rg!(A), idx_iy),  inst!(0xBF: XEP.b),
//     inst!(0xC0: XEP.b),         inst!(0xC1: XEP.b),         inst!(0xC2: XEP.b),         inst!(0xC3: XEP.b),          inst!(0xC4: XEP.b),         inst!(0xC5: XEP.b),         inst!(0xC6: XEP.b),          inst!(0xC7: XEP.b),         inst!(0xC8: XEP.b), inst!(0xC9: XEP.b),       inst!(0xCA: XEP.b),      inst!(0xCB: XEP.b),    inst!(0xCC: XEP.b), inst!(0xCD: XEP.b), inst!(0xCE: XEP.b),          inst!(0xCF: XEP.b),
//     inst!(0xD0: XEP.b),         inst!(0xD1: XEP.b),         inst!(0xD2: XEP.b),         inst!(0xD3: XEP.b),          inst!(0xD4: XEP.b),         inst!(0xD5: XEP.b),         inst!(0xD6: XEP.b),          inst!(0xD7: XEP.b),         inst!(0xD8: XEP.b), inst!(0xD9: XEP.b),       inst!(0xDA: XEP.b),      inst!(0xDB: XEP.b),    inst!(0xDC: XEP.b), inst!(0xDD: XEP.b), inst!(0xDE: XEP.b),          inst!(0xDF: XEP.b),
//     inst!(0xE0: XEP.b),         inst!(0xE1: POP.w iy),      inst!(0xE2: XEP.b),         inst!(0xE3: EX.w ind_sp iy), inst!(0xE4: XEP.b),         inst!(0xE5: PUSH.w iy),     inst!(0xE6: XEP.b),          inst!(0xE7: XEP.b),         inst!(0xE8: XEP.b), inst!(0xE9: JP_ind.b iy), inst!(0xEA: XEP.b),      inst!(0xEB: XEP.b),    inst!(0xEC: XEP.b), inst!(0xED: XEP.b), inst!(0xEE: XEP.b),          inst!(0xEF: XEP.b),
//     inst!(0xF0: XEP.b),         inst!(0xF1: XEP.b),         inst!(0xF2: XEP.b),         inst!(0xF3: XEP.b),          inst!(0xF4: XEP.b),         inst!(0xF5: XEP.b),         inst!(0xF6: XEP.b),          inst!(0xF7: XEP.b),         inst!(0xF8: XEP.b), inst!(0xF9: LD.w sp iy),  inst!(0xFA: XEP.b),      inst!(0xFB: XEP.b),    inst!(0xFC: XEP.b), inst!(0xFD: XEP.b), inst!(0xFE: XEP.b),          inst!(0xFF: XEP.b),
// ];

// static ref DDCB_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: XEP.b), inst!(0x01: XEP.b), inst!(0x02: XEP.b), inst!(0x03: XEP.b), inst!(0x04: XEP.b), inst!(0x05: XEP.b), inst!(0x06: RLC.b idx_ix),   inst!(0x07: XEP.b), inst!(0x08: XEP.b), inst!(0x09: XEP.b), inst!(0x0A: XEP.b), inst!(0x0B: XEP.b), inst!(0x0C: XEP.b), inst!(0x0D: XEP.b), inst!(0x0E: RRC.b idx_ix), inst!(0x0F: XEP.b),
//     inst!(0x10: XEP.b), inst!(0x11: XEP.b), inst!(0x12: XEP.b), inst!(0x13: XEP.b), inst!(0x14: XEP.b), inst!(0x15: XEP.b), inst!(0x16: RL.b idx_ix),    inst!(0x17: XEP.b), inst!(0x18: XEP.b), inst!(0x19: XEP.b), inst!(0x1A: XEP.b), inst!(0x1B: XEP.b), inst!(0x1C: XEP.b), inst!(0x1D: XEP.b), inst!(0x1E: RR.b idx_ix), inst!(0x1F: XEP.b),
//     inst!(0x20: XEP.b), inst!(0x21: XEP.b), inst!(0x22: XEP.b), inst!(0x23: XEP.b), inst!(0x24: XEP.b), inst!(0x25: XEP.b), inst!(0x26: SLA.b idx_ix),   inst!(0x27: XEP.b), inst!(0x28: XEP.b), inst!(0x29: XEP.b), inst!(0x2A: XEP.b), inst!(0x2B: XEP.b), inst!(0x2C: XEP.b), inst!(0x2D: XEP.b), inst!(0x2E: SRA.b idx_ix), inst!(0x2F: XEP.b),
//     inst!(0x30: XEP.b), inst!(0x31: XEP.b), inst!(0x32: XEP.b), inst!(0x33: XEP.b), inst!(0x34: XEP.b), inst!(0x35: XEP.b), inst!(0x36: XEP.b),          inst!(0x37: XEP.b), inst!(0x38: XEP.b), inst!(0x39: XEP.b), inst!(0x3A: XEP.b), inst!(0x3B: XEP.b), inst!(0x3C: XEP.b), inst!(0x3D: XEP.b), inst!(0x3E: SRL.b idx_ix), inst!(0x3F: XEP.b),
//     inst!(0x40: XEP.b), inst!(0x41: XEP.b), inst!(0x42: XEP.b), inst!(0x43: XEP.b), inst!(0x44: XEP.b), inst!(0x45: XEP.b), inst!(0x46: BIT.b 0 idx_ix), inst!(0x47: XEP.b), inst!(0x48: XEP.b), inst!(0x49: XEP.b), inst!(0x4A: XEP.b), inst!(0x4B: XEP.b), inst!(0x4C: XEP.b), inst!(0x4D: XEP.b), inst!(0x4E: BIT.b 1 idx_ix), inst!(0x4F: XEP.b),
//     inst!(0x50: XEP.b), inst!(0x51: XEP.b), inst!(0x52: XEP.b), inst!(0x53: XEP.b), inst!(0x54: XEP.b), inst!(0x55: XEP.b), inst!(0x56: BIT.b 2 idx_ix), inst!(0x57: XEP.b), inst!(0x58: XEP.b), inst!(0x59: XEP.b), inst!(0x5A: XEP.b), inst!(0x5B: XEP.b), inst!(0x5C: XEP.b), inst!(0x5D: XEP.b), inst!(0x5E: BIT.b 3 idx_ix), inst!(0x5F: XEP.b),
//     inst!(0x60: XEP.b), inst!(0x61: XEP.b), inst!(0x62: XEP.b), inst!(0x63: XEP.b), inst!(0x64: XEP.b), inst!(0x65: XEP.b), inst!(0x66: BIT.b 4 idx_ix), inst!(0x67: XEP.b), inst!(0x68: XEP.b), inst!(0x69: XEP.b), inst!(0x6A: XEP.b), inst!(0x6B: XEP.b), inst!(0x6C: XEP.b), inst!(0x6D: XEP.b), inst!(0x6E: BIT.b 5 idx_ix), inst!(0x6F: XEP.b),
//     inst!(0x70: XEP.b), inst!(0x71: XEP.b), inst!(0x72: XEP.b), inst!(0x73: XEP.b), inst!(0x74: XEP.b), inst!(0x75: XEP.b), inst!(0x76: BIT.b 6 idx_ix), inst!(0x77: XEP.b), inst!(0x78: XEP.b), inst!(0x79: XEP.b), inst!(0x7A: XEP.b), inst!(0x7B: XEP.b), inst!(0x7C: XEP.b), inst!(0x7D: XEP.b), inst!(0x7E: BIT.b 7 idx_ix), inst!(0x7F: XEP.b),
//     inst!(0x80: XEP.b), inst!(0x81: XEP.b), inst!(0x82: XEP.b), inst!(0x83: XEP.b), inst!(0x84: XEP.b), inst!(0x85: XEP.b), inst!(0x86: RES.b 0 idx_ix), inst!(0x87: XEP.b), inst!(0x88: XEP.b), inst!(0x89: XEP.b), inst!(0x8A: XEP.b), inst!(0x8B: XEP.b), inst!(0x8C: XEP.b), inst!(0x8D: XEP.b), inst!(0x8E: RES.b 1 idx_ix), inst!(0x8F: XEP.b),
//     inst!(0x90: XEP.b), inst!(0x91: XEP.b), inst!(0x92: XEP.b), inst!(0x93: XEP.b), inst!(0x94: XEP.b), inst!(0x95: XEP.b), inst!(0x96: RES.b 2 idx_ix), inst!(0x97: XEP.b), inst!(0x98: XEP.b), inst!(0x99: XEP.b), inst!(0x9A: XEP.b), inst!(0x9B: XEP.b), inst!(0x9C: XEP.b), inst!(0x9D: XEP.b), inst!(0x9E: RES.b 3 idx_ix), inst!(0x9F: XEP.b),
//     inst!(0xA0: XEP.b), inst!(0xA1: XEP.b), inst!(0xA2: XEP.b), inst!(0xA3: XEP.b), inst!(0xA4: XEP.b), inst!(0xA5: XEP.b), inst!(0xA6: RES.b 4 idx_ix), inst!(0xA7: XEP.b), inst!(0xA8: XEP.b), inst!(0xA9: XEP.b), inst!(0xAA: XEP.b), inst!(0xAB: XEP.b), inst!(0xAC: XEP.b), inst!(0xAD: XEP.b), inst!(0xAE: RES.b 5 idx_ix), inst!(0xAF: XEP.b),
//     inst!(0xB0: XEP.b), inst!(0xB1: XEP.b), inst!(0xB2: XEP.b), inst!(0xB3: XEP.b), inst!(0xB4: XEP.b), inst!(0xB5: XEP.b), inst!(0xB6: RES.b 6 idx_ix), inst!(0xB7: XEP.b), inst!(0xB8: XEP.b), inst!(0xB9: XEP.b), inst!(0xBA: XEP.b), inst!(0xBB: XEP.b), inst!(0xBC: XEP.b), inst!(0xBD: XEP.b), inst!(0xBE: RES.b 7 idx_ix), inst!(0xBF: XEP.b),
//     inst!(0xC0: XEP.b), inst!(0xC1: XEP.b), inst!(0xC2: XEP.b), inst!(0xC3: XEP.b), inst!(0xC4: XEP.b), inst!(0xC5: XEP.b), inst!(0xC6: SET.b 0 idx_ix), inst!(0xC7: XEP.b), inst!(0xC8: XEP.b), inst!(0xC9: XEP.b), inst!(0xCA: XEP.b), inst!(0xCB: XEP.b), inst!(0xCC: XEP.b), inst!(0xCD: XEP.b), inst!(0xCE: SET.b 1 idx_ix), inst!(0xCF: XEP.b),
//     inst!(0xD0: XEP.b), inst!(0xD1: XEP.b), inst!(0xD2: XEP.b), inst!(0xD3: XEP.b), inst!(0xD4: XEP.b), inst!(0xD5: XEP.b), inst!(0xD6: SET.b 2 idx_ix), inst!(0xD7: XEP.b), inst!(0xD8: XEP.b), inst!(0xD9: XEP.b), inst!(0xDA: XEP.b), inst!(0xDB: XEP.b), inst!(0xDC: XEP.b), inst!(0xDD: XEP.b), inst!(0xDE: SET.b 3 idx_ix), inst!(0xDF: XEP.b),
//     inst!(0xE0: XEP.b), inst!(0xE1: XEP.b), inst!(0xE2: XEP.b), inst!(0xE3: XEP.b), inst!(0xE4: XEP.b), inst!(0xE5: XEP.b), inst!(0xE6: SET.b 4 idx_ix), inst!(0xE7: XEP.b), inst!(0xE8: XEP.b), inst!(0xE9: XEP.b), inst!(0xEA: XEP.b), inst!(0xEB: XEP.b), inst!(0xEC: XEP.b), inst!(0xED: XEP.b), inst!(0xEE: SET.b 5 idx_ix), inst!(0xEF: XEP.b),
//     inst!(0xF0: XEP.b), inst!(0xF1: XEP.b), inst!(0xF2: XEP.b), inst!(0xF3: XEP.b), inst!(0xF4: XEP.b), inst!(0xF5: XEP.b), inst!(0xF6: SET.b 6 idx_ix), inst!(0xF7: XEP.b), inst!(0xF8: XEP.b), inst!(0xF9: XEP.b), inst!(0xFA: XEP.b), inst!(0xFB: XEP.b), inst!(0xFC: XEP.b), inst!(0xFD: XEP.b), inst!(0xFE: SET.b 7 idx_ix), inst!(0xFF: XEP.b),
// ];

// static ref FDCB_OPCODE_TABLE: [Instruction; 0x100] = [
//     inst!(0x00: XEP.b), inst!(0x01: XEP.b), inst!(0x02: XEP.b), inst!(0x03: XEP.b), inst!(0x04: XEP.b), inst!(0x05: XEP.b), inst!(0x06: RLC.b idx_iy),   inst!(0x07: XEP.b), inst!(0x08: XEP.b), inst!(0x09: XEP.b), inst!(0x0A: XEP.b), inst!(0x0B: XEP.b), inst!(0x0C: XEP.b), inst!(0x0D: XEP.b), inst!(0x0E: RRC.b idx_iy), inst!(0x0F: XEP.b),
//     inst!(0x10: XEP.b), inst!(0x11: XEP.b), inst!(0x12: XEP.b), inst!(0x13: XEP.b), inst!(0x14: XEP.b), inst!(0x15: XEP.b), inst!(0x16: RL.b idx_iy),    inst!(0x17: XEP.b), inst!(0x18: XEP.b), inst!(0x19: XEP.b), inst!(0x1A: XEP.b), inst!(0x1B: XEP.b), inst!(0x1C: XEP.b), inst!(0x1D: XEP.b), inst!(0x1E: RR.b idx_iy), inst!(0x1F: XEP.b),
//     inst!(0x20: XEP.b), inst!(0x21: XEP.b), inst!(0x22: XEP.b), inst!(0x23: XEP.b), inst!(0x24: XEP.b), inst!(0x25: XEP.b), inst!(0x26: SLA.b idx_iy),   inst!(0x27: XEP.b), inst!(0x28: XEP.b), inst!(0x29: XEP.b), inst!(0x2A: XEP.b), inst!(0x2B: XEP.b), inst!(0x2C: XEP.b), inst!(0x2D: XEP.b), inst!(0x2E: SRA.b idx_iy), inst!(0x2F: XEP.b),
//     inst!(0x30: XEP.b), inst!(0x31: XEP.b), inst!(0x32: XEP.b), inst!(0x33: XEP.b), inst!(0x34: XEP.b), inst!(0x35: XEP.b), inst!(0x36: XEP.b),          inst!(0x37: XEP.b), inst!(0x38: XEP.b), inst!(0x39: XEP.b), inst!(0x3A: XEP.b), inst!(0x3B: XEP.b), inst!(0x3C: XEP.b), inst!(0x3D: XEP.b), inst!(0x3E: SRL.b idx_iy), inst!(0x3F: XEP.b),
//     inst!(0x40: XEP.b), inst!(0x41: XEP.b), inst!(0x42: XEP.b), inst!(0x43: XEP.b), inst!(0x44: XEP.b), inst!(0x45: XEP.b), inst!(0x46: BIT.b 0 idx_iy), inst!(0x47: XEP.b), inst!(0x48: XEP.b), inst!(0x49: XEP.b), inst!(0x4A: XEP.b), inst!(0x4B: XEP.b), inst!(0x4C: XEP.b), inst!(0x4D: XEP.b), inst!(0x4E: BIT.b 1 idx_iy), inst!(0x4F: XEP.b),
//     inst!(0x50: XEP.b), inst!(0x51: XEP.b), inst!(0x52: XEP.b), inst!(0x53: XEP.b), inst!(0x54: XEP.b), inst!(0x55: XEP.b), inst!(0x56: BIT.b 2 idx_iy), inst!(0x57: XEP.b), inst!(0x58: XEP.b), inst!(0x59: XEP.b), inst!(0x5A: XEP.b), inst!(0x5B: XEP.b), inst!(0x5C: XEP.b), inst!(0x5D: XEP.b), inst!(0x5E: BIT.b 3 idx_iy), inst!(0x5F: XEP.b),
//     inst!(0x60: XEP.b), inst!(0x61: XEP.b), inst!(0x62: XEP.b), inst!(0x63: XEP.b), inst!(0x64: XEP.b), inst!(0x65: XEP.b), inst!(0x66: BIT.b 4 idx_iy), inst!(0x67: XEP.b), inst!(0x68: XEP.b), inst!(0x69: XEP.b), inst!(0x6A: XEP.b), inst!(0x6B: XEP.b), inst!(0x6C: XEP.b), inst!(0x6D: XEP.b), inst!(0x6E: BIT.b 5 idx_iy), inst!(0x6F: XEP.b),
//     inst!(0x70: XEP.b), inst!(0x71: XEP.b), inst!(0x72: XEP.b), inst!(0x73: XEP.b), inst!(0x74: XEP.b), inst!(0x75: XEP.b), inst!(0x76: BIT.b 6 idx_iy), inst!(0x77: XEP.b), inst!(0x78: XEP.b), inst!(0x79: XEP.b), inst!(0x7A: XEP.b), inst!(0x7B: XEP.b), inst!(0x7C: XEP.b), inst!(0x7D: XEP.b), inst!(0x7E: BIT.b 7 idx_iy), inst!(0x7F: XEP.b),
//     inst!(0x80: XEP.b), inst!(0x81: XEP.b), inst!(0x82: XEP.b), inst!(0x83: XEP.b), inst!(0x84: XEP.b), inst!(0x85: XEP.b), inst!(0x86: RES.b 0 idx_iy), inst!(0x87: XEP.b), inst!(0x88: XEP.b), inst!(0x89: XEP.b), inst!(0x8A: XEP.b), inst!(0x8B: XEP.b), inst!(0x8C: XEP.b), inst!(0x8D: XEP.b), inst!(0x8E: RES.b 1 idx_iy), inst!(0x8F: XEP.b),
//     inst!(0x90: XEP.b), inst!(0x91: XEP.b), inst!(0x92: XEP.b), inst!(0x93: XEP.b), inst!(0x94: XEP.b), inst!(0x95: XEP.b), inst!(0x96: RES.b 2 idx_iy), inst!(0x97: XEP.b), inst!(0x98: XEP.b), inst!(0x99: XEP.b), inst!(0x9A: XEP.b), inst!(0x9B: XEP.b), inst!(0x9C: XEP.b), inst!(0x9D: XEP.b), inst!(0x9E: RES.b 3 idx_iy), inst!(0x9F: XEP.b),
//     inst!(0xA0: XEP.b), inst!(0xA1: XEP.b), inst!(0xA2: XEP.b), inst!(0xA3: XEP.b), inst!(0xA4: XEP.b), inst!(0xA5: XEP.b), inst!(0xA6: RES.b 4 idx_iy), inst!(0xA7: XEP.b), inst!(0xA8: XEP.b), inst!(0xA9: XEP.b), inst!(0xAA: XEP.b), inst!(0xAB: XEP.b), inst!(0xAC: XEP.b), inst!(0xAD: XEP.b), inst!(0xAE: RES.b 5 idx_iy), inst!(0xAF: XEP.b),
//     inst!(0xB0: XEP.b), inst!(0xB1: XEP.b), inst!(0xB2: XEP.b), inst!(0xB3: XEP.b), inst!(0xB4: XEP.b), inst!(0xB5: XEP.b), inst!(0xB6: RES.b 6 idx_iy), inst!(0xB7: XEP.b), inst!(0xB8: XEP.b), inst!(0xB9: XEP.b), inst!(0xBA: XEP.b), inst!(0xBB: XEP.b), inst!(0xBC: XEP.b), inst!(0xBD: XEP.b), inst!(0xBE: RES.b 7 idx_iy), inst!(0xBF: XEP.b),
//     inst!(0xC0: XEP.b), inst!(0xC1: XEP.b), inst!(0xC2: XEP.b), inst!(0xC3: XEP.b), inst!(0xC4: XEP.b), inst!(0xC5: XEP.b), inst!(0xC6: SET.b 0 idx_iy), inst!(0xC7: XEP.b), inst!(0xC8: XEP.b), inst!(0xC9: XEP.b), inst!(0xCA: XEP.b), inst!(0xCB: XEP.b), inst!(0xCC: XEP.b), inst!(0xCD: XEP.b), inst!(0xCE: SET.b 1 idx_iy), inst!(0xCF: XEP.b),
//     inst!(0xD0: XEP.b), inst!(0xD1: XEP.b), inst!(0xD2: XEP.b), inst!(0xD3: XEP.b), inst!(0xD4: XEP.b), inst!(0xD5: XEP.b), inst!(0xD6: SET.b 2 idx_iy), inst!(0xD7: XEP.b), inst!(0xD8: XEP.b), inst!(0xD9: XEP.b), inst!(0xDA: XEP.b), inst!(0xDB: XEP.b), inst!(0xDC: XEP.b), inst!(0xDD: XEP.b), inst!(0xDE: SET.b 3 idx_iy), inst!(0xDF: XEP.b),
//     inst!(0xE0: XEP.b), inst!(0xE1: XEP.b), inst!(0xE2: XEP.b), inst!(0xE3: XEP.b), inst!(0xE4: XEP.b), inst!(0xE5: XEP.b), inst!(0xE6: SET.b 4 idx_iy), inst!(0xE7: XEP.b), inst!(0xE8: XEP.b), inst!(0xE9: XEP.b), inst!(0xEA: XEP.b), inst!(0xEB: XEP.b), inst!(0xEC: XEP.b), inst!(0xED: XEP.b), inst!(0xEE: SET.b 5 idx_iy), inst!(0xEF: XEP.b),
//     inst!(0xF0: XEP.b), inst!(0xF1: XEP.b), inst!(0xF2: XEP.b), inst!(0xF3: XEP.b), inst!(0xF4: XEP.b), inst!(0xF5: XEP.b), inst!(0xF6: SET.b 6 idx_iy), inst!(0xF7: XEP.b), inst!(0xF8: XEP.b), inst!(0xF9: XEP.b), inst!(0xFA: XEP.b), inst!(0xFB: XEP.b), inst!(0xFC: XEP.b), inst!(0xFD: XEP.b), inst!(0xFE: SET.b 7 idx_iy), inst!(0xFF: XEP.b),
// ];

use crate::{addressing_mode::*, bus::BusZ80, op, b, rg, rgi, sp, am, sz, instruction_set::*, operation::Operation, register_set::{Register, RegisterType}, Size};

pub(crate) fn opcode_table<T>() -> [Operation<T>; 0x100] where T: 'static + BusZ80 {
    [
        op!(0x00: b!(NOP)),                       op!(0x01: b!(LD), rg!(BC), am!(DD)),      op!(0x02: b!(LD), rgi!(BC.b), rg!(A)),    op!(0x03: b!(INC), rg!(BC)),              op!(0x04: b!(INC), rg!(B)),               op!(0x05: b!(DEC), rg!(B)),               op!(0x06: b!(LD), rg!(B), am!(D)),         op!(0x07: b!(RLCA)),                      op!(0x08: b!(EX), rg!(AF), rg!(AF_)),    op!(0x09: b!(ADD), rg!(HL), rg!(BC)),    op!(0x0A: b!(LD), rg!(A), rgi!(BC.b)),    op!(0x0B: b!(DEC), rg!(BC)),           op!(0x0C: b!(INC), rg!(C)),            op!(0x0D: b!(DEC), rg!(C)),            op!(0x0E: b!(LD), rg!(C), am!(D)),        op!(0x0F: b!(RRCA)),
        op!(0x10: b!(DJNZ), am!(D)),              op!(0x11: b!(LD), rg!(DE), am!(DD)),      op!(0x12: b!(LD), rgi!(DE.b), rg!(A)),    op!(0x13: b!(INC), rg!(DE)),              op!(0x14: b!(INC), rg!(D)),               op!(0x15: b!(DEC), rg!(D)),               op!(0x16: b!(LD), rg!(D), am!(D)),         op!(0x17: b!(RLA)),                       op!(0x18: b!(JR UNC), am!(D)),           op!(0x19: b!(ADD), rg!(HL), rg!(DE)),    op!(0x1A: b!(LD), rg!(A), rgi!(DE.b)),    op!(0x1B: b!(DEC), rg!(DE)),           op!(0x1C: b!(INC), rg!(E)),            op!(0x1D: b!(DEC), rg!(E)),            op!(0x1E: b!(LD), rg!(E), am!(D)),        op!(0x1F: b!(RRA)),
        op!(0x20: b!(JR NZ), am!(D)),             op!(0x21: b!(LD), rg!(HL), am!(DD)),      op!(0x22: b!(LD), am!(RR), rg!(HL)),      op!(0x23: b!(INC), rg!(HL)),              op!(0x24: b!(INC), rg!(H)),               op!(0x25: b!(DEC), rg!(H)),               op!(0x26: b!(LD), rg!(H), am!(D)),         op!(0x27: b!(DAA)),                       op!(0x28: b!(JR Z), am!(D)),             op!(0x29: b!(ADD), rg!(HL), rg!(HL)),    op!(0x2A: b!(LD), rg!(HL), am!(RR)),      op!(0x2B: b!(DEC), rg!(HL)),           op!(0x2C: b!(INC), rg!(L)),            op!(0x2D: b!(DEC), rg!(L)),            op!(0x2E: b!(LD), rg!(L), am!(D)),        op!(0x2F: b!(CPL)),
        op!(0x30: b!(JR NC), am!(D)),             op!(0x31: b!(LD), sp!(), am!(DD)),        op!(0x32: b!(LD), am!(RR), rg!(A)),       op!(0x33: b!(INC), sp!()),                op!(0x34: b!(INC), rgi!(HL.b)),           op!(0x35: b!(DEC), rgi!(HL.b)),           op!(0x36: b!(LD), rgi!(HL.b), am!(D)),     op!(0x37: b!(SCF)),                       op!(0x38: b!(JR C), am!(D)),             op!(0x39: b!(ADD), rg!(HL), sp!()),      op!(0x3A: b!(LD), rg!(A), am!(RR)),       op!(0x3B: b!(DEC), sp!()),             op!(0x3C: b!(INC), rg!(A)),            op!(0x3D: b!(DEC), rg!(A)),            op!(0x3E: b!(LD), rg!(A), am!(D)),        op!(0x3F: b!(CCF)),
        op!(0x40: b!(LD), rg!(B), rg!(B_)),       op!(0x41: b!(LD), rg!(B), rg!(C_)),       op!(0x42: b!(LD), rg!(B), rg!(D_)),       op!(0x43: b!(LD), rg!(B), rg!(E_)),       op!(0x44: b!(LD), rg!(B), rg!(H_)),       op!(0x45: b!(LD), rg!(B), rg!(L_)),       op!(0x46: b!(LD), rg!(B), rgi!(HL.b)),     op!(0x47: b!(LD), rg!(B), rg!(A_)),       op!(0x48: b!(LD), rg!(C), rg!(B_)),      op!(0x49: b!(LD), rg!(C), rg!(C_)),      op!(0x4A: b!(LD), rg!(C), rg!(D_)),       op!(0x4B: b!(LD), rg!(C), rg!(E_)),    op!(0x4C: b!(LD), rg!(C), rg!(H_)),    op!(0x4D: b!(LD), rg!(C), rg!(L_)),    op!(0x4E: b!(LD), rg!(C), rgi!(HL.b)),    op!(0x4F: b!(LD), rg!(C), rg!(A_)),
        op!(0x50: b!(LD), rg!(D), rg!(B_)),       op!(0x51: b!(LD), rg!(D), rg!(C_)),       op!(0x52: b!(LD), rg!(D), rg!(D_)),       op!(0x53: b!(LD), rg!(D), rg!(E_)),       op!(0x54: b!(LD), rg!(D), rg!(H_)),       op!(0x55: b!(LD), rg!(D), rg!(L_)),       op!(0x56: b!(LD), rg!(D), rgi!(HL.b)),     op!(0x57: b!(LD), rg!(D), rg!(A_)),       op!(0x58: b!(LD), rg!(E), rg!(B_)),      op!(0x59: b!(LD), rg!(E), rg!(C_)),      op!(0x5A: b!(LD), rg!(E), rg!(D_)),       op!(0x5B: b!(LD), rg!(E), rg!(E_)),    op!(0x5C: b!(LD), rg!(E), rg!(H_)),    op!(0x5D: b!(LD), rg!(E), rg!(L_)),    op!(0x5E: b!(LD), rg!(E), rgi!(HL.b)),    op!(0x5F: b!(LD), rg!(E), rg!(A_)),
        op!(0x60: b!(LD), rg!(H), rg!(B_)),       op!(0x61: b!(LD), rg!(H), rg!(C_)),       op!(0x62: b!(LD), rg!(H), rg!(D_)),       op!(0x63: b!(LD), rg!(H), rg!(E_)),       op!(0x64: b!(LD), rg!(H), rg!(H_)),       op!(0x65: b!(LD), rg!(H), rg!(L_)),       op!(0x66: b!(LD), rg!(H), rgi!(HL.b)),     op!(0x67: b!(LD), rg!(H), rg!(A_)),       op!(0x68: b!(LD), rg!(L), rg!(B_)),      op!(0x69: b!(LD), rg!(L), rg!(C_)),      op!(0x6A: b!(LD), rg!(L), rg!(D_)),       op!(0x6B: b!(LD), rg!(L), rg!(E_)),    op!(0x6C: b!(LD), rg!(L), rg!(H_)),    op!(0x6D: b!(LD), rg!(L), rg!(L_)),    op!(0x6E: b!(LD), rg!(L), rgi!(HL.b)),    op!(0x6F: b!(LD), rg!(L), rg!(A_)),
        op!(0x70: b!(LD), rgi!(HL.b), rg!(B)),    op!(0x71: b!(LD), rgi!(HL.b), rg!(C)),    op!(0x72: b!(LD), rgi!(HL.b), rg!(D)),    op!(0x73: b!(LD), rgi!(HL.b), rg!(E)),    op!(0x74: b!(LD), rgi!(HL.b), rg!(H)),    op!(0x75: b!(LD), rgi!(HL.b), rg!(L)),    op!(0x76: b!(HALT)),                       op!(0x77: b!(LD), rgi!(HL.b), rg!(A)),    op!(0x78: b!(LD), rg!(A), rg!(B_)),      op!(0x79: b!(LD), rg!(A), rg!(C_)),      op!(0x7A: b!(LD), rg!(A), rg!(D_)),       op!(0x7B: b!(LD), rg!(A), rg!(E_)),    op!(0x7C: b!(LD), rg!(A), rg!(H_)),    op!(0x7D: b!(LD), rg!(A), rg!(L_)),    op!(0x7E: b!(LD), rg!(A), rgi!(HL.b)),    op!(0x7F: b!(LD), rg!(A), rg!(A_)),
        op!(0x80: b!(ADD), rg!(A), rg!(B)),       op!(0x81: b!(ADD), rg!(A), rg!(C)),       op!(0x82: b!(ADD), rg!(A), rg!(D)),       op!(0x83: b!(ADD), rg!(A), rg!(E)),       op!(0x84: b!(ADD), rg!(A), rg!(H)),       op!(0x85: b!(ADD), rg!(A), rg!(L)),       op!(0x86: b!(ADD), rg!(A), rgi!(HL.b)),    op!(0x87: b!(ADD), rg!(A), rg!(A)),       op!(0x88: b!(ADC), rg!(A), rg!(B)),      op!(0x89: b!(ADC), rg!(A), rg!(C)),      op!(0x8A: b!(ADC), rg!(A), rg!(D)),       op!(0x8B: b!(ADC), rg!(A), rg!(E)),    op!(0x8C: b!(ADC), rg!(A), rg!(H)),    op!(0x8D: b!(ADC), rg!(A), rg!(L)),    op!(0x8E: b!(ADC), rg!(A), rgi!(HL.b)),   op!(0x8F: b!(ADC), rg!(A), rg!(A)),
        op!(0x90: b!(SUB), rg!(A), rg!(B)),       op!(0x91: b!(SUB), rg!(A), rg!(C)),       op!(0x92: b!(SUB), rg!(A), rg!(D)),       op!(0x93: b!(SUB), rg!(A), rg!(E)),       op!(0x94: b!(SUB), rg!(A), rg!(H)),       op!(0x95: b!(SUB), rg!(A), rg!(L)),       op!(0x96: b!(SUB), rg!(A), rgi!(HL.b)),    op!(0x97: b!(SUB), rg!(A), rg!(A)),       op!(0x98: b!(SBC), rg!(A), rg!(B)),      op!(0x99: b!(SBC), rg!(A), rg!(C)),      op!(0x9A: b!(SBC), rg!(A), rg!(D)),       op!(0x9B: b!(SBC), rg!(A), rg!(E)),    op!(0x9C: b!(SBC), rg!(A), rg!(H)),    op!(0x9D: b!(SBC), rg!(A), rg!(L)),    op!(0x9E: b!(SBC), rg!(A), rgi!(HL.b)),   op!(0x9F: b!(SBC), rg!(A), rg!(A)),
        op!(0xA0: b!(AND), rg!(A), rg!(B)),       op!(0xA1: b!(AND), rg!(A), rg!(C)),       op!(0xA2: b!(AND), rg!(A), rg!(D)),       op!(0xA3: b!(AND), rg!(A), rg!(E)),       op!(0xA4: b!(AND), rg!(A), rg!(H)),       op!(0xA5: b!(AND), rg!(A), rg!(L)),       op!(0xA6: b!(AND), rg!(A), rgi!(HL.b)),    op!(0xA7: b!(AND), rg!(A), rg!(A)),       op!(0xA8: b!(XOR), rg!(A), rg!(B)),      op!(0xA9: b!(XOR), rg!(A), rg!(C)),      op!(0xAA: b!(XOR), rg!(A), rg!(D)),       op!(0xAB: b!(XOR), rg!(A), rg!(E)),    op!(0xAC: b!(XOR), rg!(A), rg!(H)),    op!(0xAD: b!(XOR), rg!(A), rg!(L)),    op!(0xAE: b!(XOR), rg!(A), rgi!(HL.b)),   op!(0xAF: b!(XOR), rg!(A), rg!(A)),
        op!(0xB0: b!(OR), rg!(A), rg!(B)),        op!(0xB1: b!(OR), rg!(A), rg!(C)),        op!(0xB2: b!(OR), rg!(A), rg!(D)),        op!(0xB3: b!(OR), rg!(A), rg!(E)),        op!(0xB4: b!(OR), rg!(A), rg!(H)),        op!(0xB5: b!(OR), rg!(A), rg!(L)),        op!(0xB6: b!(OR), rg!(A), rgi!(HL.b)),     op!(0xB7: b!(OR), rg!(A), rg!(A)),        op!(0xB8: b!(CP), rg!(A), rg!(B)),       op!(0xB9: b!(CP), rg!(A), rg!(C)),       op!(0xBA: b!(CP), rg!(A), rg!(D)),        op!(0xBB: b!(CP), rg!(A), rg!(E)),     op!(0xBC: b!(CP), rg!(A), rg!(H)),     op!(0xBD: b!(CP), rg!(A), rg!(L)),     op!(0xBE: b!(CP), rg!(A), rgi!(HL.b)),    op!(0xBF: b!(CP), rg!(A), rg!(A)),
        op!(0xC0: b!(RET NZ)),                    op!(0xC1: b!(POP), rg!(BC)),              op!(0xC2: b!(JP NZ), am!(DD)),            op!(0xC3: b!(JP UNC), am!(DD)),           op!(0xC4: b!(CALL NZ), am!(DD)),          op!(0xC5: b!(PUSH), rg!(BC)),             op!(0xC6: b!(ADD), rg!(A), am!(D)),        op!(0xC7: b!(RST 0x00)),                 op!(0xC8: b!(RET Z)),                    op!(0xC9: b!(RET UNC)),                  op!(0xCA: b!(JP Z), am!(DD)),             op!(0xCB: b!(NOP)),                    op!(0xCC: b!(CALL Z), am!(DD)),        op!(0xCD: b!(CALL UNC), am!(DD)),      op!(0xCE: b!(ADC), rg!(A), am!(D)),       op!(0xCF: b!(RST 0x08)),
        op!(0xD0: b!(RET NC)),                    op!(0xD1: b!(POP), rg!(DE)),              op!(0xD2: b!(JP NC), am!(DD)),            op!(0xD3: b!(OUT), am!(R), rg!(A)),       op!(0xD4: b!(CALL NC), am!(DD)),          op!(0xD5: b!(PUSH), rg!(DE)),             op!(0xD6: b!(SUB), rg!(A), am!(D)),        op!(0xD7: b!(RST 0x10)),                 op!(0xD8: b!(RET C)),                    op!(0xD9: b!(EXX)),                      op!(0xDA: b!(JP C), am!(DD)),             op!(0xDB: b!(IN), rg!(A), am!(R)),     op!(0xDC: b!(CALL C), am!(DD)),        op!(0xDD: b!(NOP)),                    op!(0xDE: b!(SBC), rg!(A), am!(D)),       op!(0xDF: b!(RST 0x18)),
        op!(0xE0: b!(RET PO)),                    op!(0xE1: b!(POP), rg!(HL)),              op!(0xE2: b!(JP PO), am!(DD)),            op!(0xE3: b!(EX), sp!(w), rg!(HL)),       op!(0xE4: b!(CALL PO), am!(DD)),          op!(0xE5: b!(PUSH), rg!(HL)),             op!(0xE6: b!(AND), rg!(A), am!(D)),        op!(0xE7: b!(RST 0x20)),                 op!(0xE8: b!(RET PE)),                   op!(0xE9: b!(JP UNC), rgi!(HL.w)),       op!(0xEA: b!(JP PE), am!(DD)),            op!(0xEB: b!(EX), rg!(DE), rg!(HL)),   op!(0xEC: b!(CALL PE), am!(DD)),       op!(0xED: b!(NOP)),                    op!(0xEE: b!(XOR), rg!(A), am!(D)),       op!(0xEF: b!(RST 0x28)),
        op!(0xF0: b!(RET P)),                     op!(0xF1: b!(POP), rg!(AF)),              op!(0xF2: b!(JP P), am!(DD)),             op!(0xF3: b!(DI)),                        op!(0xF4: b!(CALL P), am!(DD)),           op!(0xF5: b!(PUSH), rg!(AF)),             op!(0xF6: b!(OR), rg!(A), am!(D)),         op!(0xF7: b!(RST 0x30)),                 op!(0xF8: b!(RET M)),                    op!(0xF9: b!(LD), sp!(), rg!(HL)),       op!(0xFA: b!(JP M), am!(DD)),             op!(0xFB: b!(EI)),                     op!(0xFC: b!(CALL M), am!(DD)),        op!(0xFD: b!(NOP)),                    op!(0xFE: b!(CP), rg!(A), am!(D)),        op!(0xFF: b!(RST 0x38)),
    ]
}

// pub(crate) fn cb_opcode_table<T>() -> [Operation<T>; 0x100] where T: 'static + BusZ80 {
//     [
//         inst!(0x00: RLC.b rg!(B)),   inst!(0x01: RLC.b rg!(C)),   inst!(0x02: RLC.b rg!(D)),   inst!(0x03: RLC.b rg!(E)),   inst!(0x04: RLC.b rg!(H)),   inst!(0x05: RLC.b rg!(L)),   inst!(0x06: RLC.b ind_hl),   inst!(0x07: RLC.b rg!(A)),   inst!(0x08: RRC.b rg!(B)),   inst!(0x09: RRC.b rg!(C)),   inst!(0x0A: RRC.b rg!(D)),   inst!(0x0B: RRC.b rg!(E)),   inst!(0x0C: RRC.b rg!(H)),   inst!(0x0D: RRC.b rg!(L)),   inst!(0x0E: RRC.b ind_hl),   inst!(0x0F: RRC.b rg!(A)),
//         inst!(0x10: RL.b rg!(B)),    inst!(0x11: RL.b rg!(C)),    inst!(0x12: RL.b rg!(D)),    inst!(0x13: RL.b rg!(E)),    inst!(0x14: RL.b rg!(H)),    inst!(0x15: RL.b rg!(L)),    inst!(0x16: RL.b ind_hl),    inst!(0x17: RL.b rg!(A)),    inst!(0x18: RR.b rg!(B)),    inst!(0x19: RR.b rg!(C)),    inst!(0x1A: RR.b rg!(A), rg!(D)),  inst!(0x1B: RR.b rg!(E)),    inst!(0x1C: RR.b rg!(H)),    inst!(0x1D: RR.b rg!(L)),    inst!(0x1E: RR.b ind_hl),    inst!(0x1F: RR.b rg!(A)),
//         inst!(0x20: SLA.b rg!(B)),   inst!(0x21: SLA.b rg!(C)),   inst!(0x22: SLA.b rg!(D)),   inst!(0x23: SLA.b rg!(E)),   inst!(0x24: SLA.b rg!(H)),   inst!(0x25: SLA.b rg!(L)),   inst!(0x26: SLA.b ind_hl),   inst!(0x27: SLA.b rg!(A)),   inst!(0x28: SRA.b rg!(B)),   inst!(0x29: SRA.b rg!(C)),   inst!(0x2A: SRA.b rg!(D)),   inst!(0x2B: SRA.b rg!(E)),   inst!(0x2C: SRA.b rg!(H)),   inst!(0x2D: SRA.b rg!(L)),   inst!(0x2E: SRA.b ind_hl),   inst!(0x2F: SRA.b rg!(A)),
//         inst!(0x30: NOP),     inst!(0x31: NOP),     inst!(0x32: NOP),     inst!(0x33: NOP),     inst!(0x34: NOP),     inst!(0x35: NOP),     inst!(0x36: NOP),          inst!(0x37: NOP),     inst!(0x38: SRL.b rg!(B)),   inst!(0x39: SRL.b rg!(C)),   inst!(0x3A: SRL.b rg!(D)),   inst!(0x3B: SRL.b rg!(E)),   inst!(0x3C: SRL.b rg!(H)),   inst!(0x3D: SRL.b rg!(L)),   inst!(0x3E: SRL.b ind_hl),   inst!(0x3F: SRL.b rg!(A)),
//         inst!(0x40: BIT.b 0 rg!(B)), inst!(0x41: BIT.b 0 rg!(C)), inst!(0x42: BIT.b 0 rg!(D)), inst!(0x43: BIT.b 0 rg!(E)), inst!(0x44: BIT.b 0 rg!(H)), inst!(0x45: BIT.b 0 rg!(L)), inst!(0x46: BIT.b 0 ind_hl), inst!(0x47: BIT.b 0 rg!(A)), inst!(0x48: BIT.b 1 rg!(B)), inst!(0x49: BIT.b 1 rg!(C)), inst!(0x4A: BIT.b 1 rg!(D)), inst!(0x4B: BIT.b 1 rg!(E)), inst!(0x4C: BIT.b 1 rg!(H)), inst!(0x4D: BIT.b 1 rg!(L)), inst!(0x4E: BIT.b 1 ind_hl), inst!(0x4F: BIT.b 1 rg!(A)),
//         inst!(0x50: BIT.b 2 rg!(B)), inst!(0x51: BIT.b 2 rg!(C)), inst!(0x52: BIT.b 2 rg!(D)), inst!(0x53: BIT.b 2 rg!(E)), inst!(0x54: BIT.b 2 rg!(H)), inst!(0x55: BIT.b 2 rg!(L)), inst!(0x56: BIT.b 2 ind_hl), inst!(0x57: BIT.b 2 rg!(A)), inst!(0x58: BIT.b 3 rg!(B)), inst!(0x59: BIT.b 3 rg!(C)), inst!(0x5A: BIT.b 3 rg!(D)), inst!(0x5B: BIT.b 3 rg!(E)), inst!(0x5C: BIT.b 3 rg!(H)), inst!(0x5D: BIT.b 3 rg!(L)), inst!(0x5E: BIT.b 3 ind_hl), inst!(0x5F: BIT.b 3 rg!(A)),
//         inst!(0x60: BIT.b 4 rg!(B)), inst!(0x61: BIT.b 4 rg!(C)), inst!(0x62: BIT.b 4 rg!(D)), inst!(0x63: BIT.b 4 rg!(E)), inst!(0x64: BIT.b 4 rg!(H)), inst!(0x65: BIT.b 4 rg!(L)), inst!(0x66: BIT.b 4 ind_hl), inst!(0x67: BIT.b 4 rg!(A)), inst!(0x68: BIT.b 5 rg!(B)), inst!(0x69: BIT.b 5 rg!(C)), inst!(0x6A: BIT.b 5 rg!(D)), inst!(0x6B: BIT.b 5 rg!(E)), inst!(0x6C: BIT.b 5 rg!(H)), inst!(0x6D: BIT.b 5 rg!(L)), inst!(0x6E: BIT.b 5 ind_hl), inst!(0x6F: BIT.b 5 rg!(A)),
//         inst!(0x70: BIT.b 6 rg!(B)), inst!(0x71: BIT.b 6 rg!(C)), inst!(0x72: BIT.b 6 rg!(D)), inst!(0x73: BIT.b 6 rg!(E)), inst!(0x74: BIT.b 6 rg!(H)), inst!(0x75: BIT.b 6 rg!(L)), inst!(0x76: BIT.b 6 ind_hl), inst!(0x77: BIT.b 6 rg!(A)), inst!(0x78: BIT.b 7 rg!(B)), inst!(0x79: BIT.b 7 rg!(C)), inst!(0x7A: BIT.b 7 rg!(D)), inst!(0x7B: BIT.b 7 rg!(E)), inst!(0x7C: BIT.b 7 rg!(H)), inst!(0x7D: BIT.b 7 rg!(L)), inst!(0x7E: BIT.b 7 ind_hl), inst!(0x7F: BIT.b 7 rg!(A)),
//         inst!(0x80: RES.b 0 rg!(B)), inst!(0x81: RES.b 0 rg!(C)), inst!(0x82: RES.b 0 rg!(D)), inst!(0x83: RES.b 0 rg!(E)), inst!(0x84: RES.b 0 rg!(H)), inst!(0x85: RES.b 0 rg!(L)), inst!(0x86: RES.b 0 ind_hl), inst!(0x87: RES.b 0 rg!(A)), inst!(0x88: RES.b 1 rg!(B)), inst!(0x89: RES.b 1 rg!(C)), inst!(0x8A: RES.b 1 rg!(D)), inst!(0x8B: RES.b 1 rg!(E)), inst!(0x8C: RES.b 1 rg!(H)), inst!(0x8D: RES.b 1 rg!(L)), inst!(0x8E: RES.b 1 ind_hl), inst!(0x8F: RES.b 1 rg!(A)),
//         inst!(0x90: RES.b 2 rg!(B)), inst!(0x91: RES.b 2 rg!(C)), inst!(0x92: RES.b 2 rg!(D)), inst!(0x93: RES.b 2 rg!(E)), inst!(0x94: RES.b 2 rg!(H)), inst!(0x95: RES.b 2 rg!(L)), inst!(0x96: RES.b 2 ind_hl), inst!(0x97: RES.b 2 rg!(A)), inst!(0x98: RES.b 3 rg!(B)), inst!(0x99: RES.b 3 rg!(C)), inst!(0x9A: RES.b 3 rg!(D)), inst!(0x9B: RES.b 3 rg!(E)), inst!(0x9C: RES.b 3 rg!(H)), inst!(0x9D: RES.b 3 rg!(L)), inst!(0x9E: RES.b 3 ind_hl), inst!(0x9F: RES.b 3 rg!(A)),
//         inst!(0xA0: RES.b 4 rg!(B)), inst!(0xA1: RES.b 4 rg!(C)), inst!(0xA2: RES.b 4 rg!(D)), inst!(0xA3: RES.b 4 rg!(E)), inst!(0xA4: RES.b 4 rg!(H)), inst!(0xA5: RES.b 4 rg!(L)), inst!(0xA6: RES.b 4 ind_hl), inst!(0xA7: RES.b 4 rg!(A)), inst!(0xA8: RES.b 5 rg!(B)), inst!(0xA9: RES.b 5 rg!(C)), inst!(0xAA: RES.b 5 rg!(D)), inst!(0xAB: RES.b 5 rg!(E)), inst!(0xAC: RES.b 5 rg!(H)), inst!(0xAD: RES.b 5 rg!(L)), inst!(0xAE: RES.b 5 ind_hl), inst!(0xAF: RES.b 5 rg!(A)),
//         inst!(0xB0: RES.b 6 rg!(B)), inst!(0xB1: RES.b 6 rg!(C)), inst!(0xB2: RES.b 6 rg!(D)), inst!(0xB3: RES.b 6 rg!(E)), inst!(0xB4: RES.b 6 rg!(H)), inst!(0xB5: RES.b 6 rg!(L)), inst!(0xB6: RES.b 6 ind_hl), inst!(0xB7: RES.b 6 rg!(A)), inst!(0xB8: RES.b 7 rg!(B)), inst!(0xB9: RES.b 7 rg!(C)), inst!(0xBA: RES.b 7 rg!(D)), inst!(0xBB: RES.b 7 rg!(E)), inst!(0xBC: RES.b 7 rg!(H)), inst!(0xBD: RES.b 7 rg!(L)), inst!(0xBE: RES.b 7 ind_hl), inst!(0xBF: RES.b 7 rg!(A)),
//         inst!(0xC0: SET.b 0 rg!(B)), inst!(0xC1: SET.b 0 rg!(C)), inst!(0xC2: SET.b 0 rg!(D)), inst!(0xC3: SET.b 0 rg!(E)), inst!(0xC4: SET.b 0 rg!(H)), inst!(0xC5: SET.b 0 rg!(L)), inst!(0xC6: SET.b 0 ind_hl), inst!(0xC7: SET.b 0 rg!(A)), inst!(0xC8: SET.b 1 rg!(B)), inst!(0xC9: SET.b 1 rg!(C)), inst!(0xCA: SET.b 1 rg!(D)), inst!(0xCB: SET.b 1 rg!(E)), inst!(0xCC: SET.b 1 rg!(H)), inst!(0xCD: SET.b 1 rg!(L)), inst!(0xCE: SET.b 1 ind_hl), inst!(0xCF: SET.b 1 rg!(A)),
//         inst!(0xD0: SET.b 2 rg!(B)), inst!(0xD1: SET.b 2 rg!(C)), inst!(0xD2: SET.b 2 rg!(D)), inst!(0xD3: SET.b 2 rg!(E)), inst!(0xD4: SET.b 2 rg!(H)), inst!(0xD5: SET.b 2 rg!(L)), inst!(0xD6: SET.b 2 ind_hl), inst!(0xD7: SET.b 2 rg!(A)), inst!(0xD8: SET.b 3 rg!(B)), inst!(0xD9: SET.b 3 rg!(C)), inst!(0xDA: SET.b 3 rg!(D)), inst!(0xDB: SET.b 3 rg!(E)), inst!(0xDC: SET.b 3 rg!(H)), inst!(0xDD: SET.b 3 rg!(L)), inst!(0xDE: SET.b 3 ind_hl), inst!(0xDF: SET.b 3 rg!(A)),
//         inst!(0xE0: SET.b 4 rg!(B)), inst!(0xE1: SET.b 4 rg!(C)), inst!(0xE2: SET.b 4 rg!(D)), inst!(0xE3: SET.b 4 rg!(E)), inst!(0xE4: SET.b 4 rg!(H)), inst!(0xE5: SET.b 4 rg!(L)), inst!(0xE6: SET.b 4 ind_hl), inst!(0xE7: SET.b 4 rg!(A)), inst!(0xE8: SET.b 5 rg!(B)), inst!(0xE9: SET.b 5 rg!(C)), inst!(0xEA: SET.b 5 rg!(D)), inst!(0xEB: SET.b 5 rg!(E)), inst!(0xEC: SET.b 5 rg!(H)), inst!(0xED: SET.b 5 rg!(L)), inst!(0xEE: SET.b 5 ind_hl), inst!(0xEF: SET.b 5 rg!(A)),
//         inst!(0xF0: SET.b 6 rg!(B)), inst!(0xF1: SET.b 6 rg!(C)), inst!(0xF2: SET.b 6 rg!(D)), inst!(0xF3: SET.b 6 rg!(E)), inst!(0xF4: SET.b 6 rg!(H)), inst!(0xF5: SET.b 6 rg!(L)), inst!(0xF6: SET.b 6 ind_hl), inst!(0xF7: SET.b 6 rg!(A)), inst!(0xF8: SET.b 7 rg!(B)), inst!(0xF9: SET.b 7 rg!(C)), inst!(0xFA: SET.b 7 rg!(D)), inst!(0xFB: SET.b 7 rg!(E)), inst!(0xFC: SET.b 7 rg!(H)), inst!(0xFD: SET.b 7 rg!(L)), inst!(0xFE: SET.b 7 ind_hl), inst!(0xFF: SET.b 7 rg!(A)),
//     ]
// }
